#include <GL/gl.h>
#include <GL/glut.h>
#include <iostream>
#include <vector>

// Camera position
float x = 4.0, y = -5.0, z = 10.0; // initially 5 units south of origin
// float x = -5.0, y = 4.0, z = 10.0; // initially 5 units south of origin
float deltaMove = 0.0; // initially camera doesn't move

// Camera direction
float lx = 4.0, ly = 4.0, lz = 0.0; // camera points initially along y-axis
float angle = 0.0; // angle of rotation for the camera direction
float deltaAngle = 0.0; // additional angle change when dragging

float lightr = 140.0/255.0, lightg = 140.0/255.0, lightb = 135.0/255.0;
float darkr = 150.0/255.0, darkg = 75.0/255.0, darkb = 0.0/255.0;

bool light0_status = true;
bool light1_status = true;

GLfloat light0_ambient[] = { 0.2, 0.2, 0.2, 1.0 };

GLfloat light1_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
GLfloat light1_specular[] = { 0.3, 0.3, 0.3, 1.0 };
GLfloat light1_position[] = { 5.0, 5.0, 8.0 };

GLfloat mat_specular[] = { 0.5, 0.5, 0.5, 1.0 };
GLfloat mat_shininess[] = { 50.0 };

void processNormalKeys( unsigned char key, int xx, int yy )
{
    switch( key )
    {
        case 27:
        case 'q':
        case 'Q':
            exit(0);
            break;
        case 'u':
        case 'U':
            deltaMove = 0.025;
            break;
        case 'd':
        case 'D':
            deltaMove = -0.025;
            break;
        case '0':
            light0_status = !light0_status;
            break;
        case '1':
            light1_status = !light1_status;
            break;
    }
}

void processKeyUp( unsigned char key, int xx, int yy )
{
    switch( key ) 
    {
        case 'u':
        case 'U':
        case 'd':
        case 'D':
            deltaMove = 0.0;
            break;
    }
}

void update(void)
{
    if (deltaMove) { // update camera position
        z += deltaMove;
    }
    glutPostRedisplay(); // redisplay everything
}

void changeSize(int w, int h)
{
    float ratio = ((float)w) / ((float)h); // window aspect ratio
    glMatrixMode(GL_PROJECTION); // projection matrix is active
    glLoadIdentity(); // reset the projection
    gluPerspective(45.0, ratio, 0.1, 100.0); // perspective transformation
    glMatrixMode(GL_MODELVIEW); // return to modelview mode
    glViewport(0, 0, w, h); // set viewport (drawing area) to entire window
}

void drawBoard()
{
    for ( float dx = 0.0; dx <= 6; dx += 2 )
    {
        for ( float dy = 0.0; dy <= 6; dy++ )
        {
            if ( int(dy) % 2 == 0 )
                glColor3f(0.0, 0.0, 0.0);
            else
                glColor3f(1.0, 1.0, 1.0);
            glBegin(GL_QUADS);
                glVertex3f(dx, dy, 0.0);
                glVertex3f(dx, dy+1, 0.0);
                glVertex3f(dx+1, dy+1, 0.0);
                glVertex3f(dx+1, dy, 0.0);
            glEnd();
            
            if ( int(dy) % 2 == 0 )
                glColor3f(1.0, 1.0, 1.0);
            else
                glColor3f(0.0, 0.0, 0.0);
            glBegin(GL_QUADS);
                glVertex3f(dx+1, dy, 0.0);
                glVertex3f(dx+1, dy+1, 0.0);
                glVertex3f(dx+2, dy+1, 0.0);
                glVertex3f(dx+2, dy, 0.0);
            glEnd();
        }
    }
}

void drawPieces()
{
    std::vector<float> posx, posy;

    // pawns
    for ( float dx = 0.5; dx < 8; dx += 1 )
    {
        for ( float dy = 1.5; dy <= 8; dy += 4 )
        {
            if ( dy == 1.5 )
                glColor3f(lightr, lightg, lightb);
            else
                glColor3f(darkr, darkg, darkb);
            glPushMatrix();
                glTranslatef(dx, dy, 0.5);
                glutSolidSphere(0.75/3, 20, 20);
            glPopMatrix();
        }
    }

    // rook
    posx = {0.5, 0.5, 7.5, 7.5};
    posy = {0.5, 6.5, 0.5, 6.5};
    for ( int i = 0; i < 4; i++ )
    {
        if ( i % 2 == 0 )
            glColor3f(lightr, lightg, lightb);
        else
            glColor3f(darkr, darkg, darkb);
        glPushMatrix();
            glTranslatef(posx[i], posy[i], 0.5);
            glutSolidCube(0.5);
        glPopMatrix();
    }

    // knight
    posx = {1.5, 1.5, 6.5, 6.5};
    posy = {0.5, 6.5, 0.5, 6.5};
    for ( int i = 0; i < 4; i++ )
    {
        if ( i % 2 == 0 )
            glColor3f(lightr, lightg, lightb);
        else
            glColor3f(darkr, darkg, darkb);
        glPushMatrix();
            glTranslatef(posx[i], posy[i], 0.5);
            glutSolidTeapot(0.75/2);
        glPopMatrix();
    }

    // bishop
    posx = {2.5, 2.5, 5.5, 5.5};
    posy = {0.5, 6.5, 0.5, 6.5};
    for ( int i = 0; i < 4; i++ )
    {
        if ( i % 2 == 0 )
            glColor3f(lightr, lightg, lightb);
        else
            glColor3f(darkr, darkg, darkb);
        glPushMatrix();
            glTranslatef(posx[i], posy[i], 0.1);
            glutSolidCone(0.75/2, 1, 20, 20);
        glPopMatrix();
    }

    // queen
    posx = {3.5, 3.5};
    posy = {0.5, 6.5};
    for ( int i = 0; i < 2; i++ )
    {
        if ( i % 2 == 0 )
            glColor3f(lightr, lightg, lightb);
        else
            glColor3f(darkr, darkg, darkb);
        glPushMatrix();
            glTranslatef(posx[i], posy[i], 0.5);
            glScalef(0.5, 0.5, 0.5);
            glutSolidTetrahedron();
        glPopMatrix();
    }

    // king
    posx = {4.5, 4.5};
    posy = {0.5, 6.5};
    for ( int i = 0; i < 4; i++ )
    {
        if ( i % 2 == 0 )
            glColor3f(lightr, lightg, lightb);
        else
            glColor3f(darkr, darkg, darkb);
        glPushMatrix();
            glTranslatef(posx[i], posy[i], 0.5);
            glScalef(0.5, 0.5, 0.5);
            glutSolidOctahedron();
        glPopMatrix();
    }
}

void displayFun(void)
{
    // Clear color and depth buffers
    glClearColor(0.0, 0.7, 1.0, 1.0); // sky color is light blue
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glShadeModel(GL_SMOOTH);

    // Reset transformations
    glLoadIdentity();

    glEnable(GL_LIGHTING);
    glEnable(GL_COLOR_MATERIAL);
    if ( light0_status ) glEnable(GL_LIGHT0);
    else glDisable(GL_LIGHT0);
    if ( light1_status ) glEnable(GL_LIGHT1);
    else glDisable(GL_LIGHT1);
    
    glLightfv(GL_LIGHT0, GL_AMBIENT, light0_ambient);
    glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_diffuse);
    glLightfv(GL_LIGHT1, GL_SPECULAR, light1_specular);
    glLightfv(GL_LIGHT1, GL_POSITION, light1_position);

    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);

    glEnable(GL_DEPTH_TEST);

    // Set the camera centered at (x,y,1) and looking along directional
    // vector (lx, ly, 0), with the z-axis pointing up
    gluLookAt(
        x, y, z,
        lx, ly, lz,
        0.0, 0.0, 1.0);

    drawBoard();
    drawPieces();

    glutSwapBuffers(); // Make it all visible
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(1000, 0);
    glutCreateWindow("Chessboard");

    glutReshapeFunc(changeSize);
    glutDisplayFunc(displayFun);
    glutIdleFunc(update); // incremental update
    glutKeyboardFunc(processNormalKeys);
    glutKeyboardUpFunc(processKeyUp);
  
    glutMainLoop();
    
    return 0;
}